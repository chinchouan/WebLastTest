(function($){
    // 定義插件 jCarouselLite
    $.fn.jCarouselLite = function(o) {
        // 默認設置
        o = $.extend({
            btnPrev: null,
            btnNext: null,
            btnGo: null,
            mouseWheel: false,
            auto: null,
            speed: 200,
            easing: null,
            vertical: false,
            circular: true,
            visible: 3,
            start: 0,
            scroll: 1,
            beforeStart: null,
            afterEnd: null
        }, o || {});

        // 主循環，為每個匹配元素設置插件
        return this.each(function() {
            var b = false, // 動畫標誌，防止重複動畫
                animCss = o.vertical ? "top" : "left", // 動畫方向
                sizeCss = o.vertical ? "height" : "width"; // 尺寸屬性
            
            var c = $(this), // 主容器
                ul = $("ul", c), // UL 元素
                tLi = $("li", ul), // LI 元素
                tl = tLi.size(), // LI 元素數量
                v = o.visible; // 可見元素數量
            
            // 如果是循環模式
            if (o.circular) {
                ul.prepend(tLi.slice(tl - v - 1 + 1).clone())
                  .append(tLi.slice(0, v).clone());
                o.start += v;
            }

            var f = $("li", ul), // 所有 LI 元素
                itemLength = f.size(), // 所有 LI 元素的總數
                curr = o.start; // 當前索引
            
            // 設置初始樣式
            c.css("visibility", "visible");
            f.css({ overflow: "hidden", float: o.vertical ? "none" : "left" });
            ul.css({ margin: "0", padding: "0", position: "relative", "list-style-type": "none", "z-index": "1" });
            c.css({ overflow: "hidden", position: "relative", "z-index": "2", left: "-50px" });

            var g = o.vertical ? height(f) : width(f); // 單個 LI 元素的大小
            var h = g * itemLength; // UL 元素的總大小
            var j = g * v; // 可見部分的大小

            f.css({ width: f.width(), height: f.height() });
            ul.css(sizeCss, h + "px").css(animCss, -(curr * g));
            c.css(sizeCss, j + "px");

            // 綁定上一頁按鈕事件
            if (o.btnPrev) $(o.btnPrev).click(function() { return go(curr - o.scroll); });

            // 綁定下一頁按鈕事件
            if (o.btnNext) $(o.btnNext).click(function() { return go(curr + o.scroll); });

            // 綁定直接跳轉按鈕事件
            if (o.btnGo) $.each(o.btnGo, function(i, a) {
                $(a).click(function() { return go(o.circular ? o.visible + i : i); });
            });

            // 綁定鼠標滾輪事件
            if (o.mouseWheel && c.mousewheel) {
                c.mousewheel(function(e, d) {
                    return d > 0 ? go(curr - o.scroll) : go(curr + o.scroll);
                });
            }

            // 自動播放
            if (o.auto) setInterval(function() { go(curr + o.scroll); }, o.auto + o.speed);

            // 獲取當前可見的元素
            function vis() {
                return f.slice(curr).slice(0, v);
            };

            // 主要的滾動函數
            function go(a) {
                if (!b) {
                    if (o.beforeStart) o.beforeStart.call(this, vis());

                    if (o.circular) {
                        if (a <= o.start - v - 1) {
                            ul.css(animCss, -((itemLength - (v * 2)) * g) + "px");
                            curr = a == o.start - v - 1 ? itemLength - (v * 2) - 1 : itemLength - (v * 2) - o.scroll;
                        } else if (a >= itemLength - v + 1) {
                            ul.css(animCss, -((v) * g) + "px");
                            curr = a == itemLength - v + 1 ? v + 1 : v + o.scroll;
                        } else {
                            curr = a;
                        }
                    } else {
                        if (a < 0 || a > itemLength - v) return;
                        else curr = a;
                    }

                    b = true;
                    ul.animate(animCss == "left" ? { left: -(curr * g) } : { top: -(curr * g) }, o.speed, o.easing, function() {
                        if (o.afterEnd) o.afterEnd.call(this, vis());
                        b = false;
                    });

                    if (!o.circular) {
                        $(o.btnPrev + "," + o.btnNext).removeClass("disabled");
                        $((curr - o.scroll < 0 && o.btnPrev) || (curr + o.scroll > itemLength - v && o.btnNext) || []).addClass("disabled");
                    }
                }
                return false;
            }
        });

        // 計算元素的外部高度和寬度
        function css(a, b) {
            return parseInt($.css(a[0], b)) || 0;
        };

        function width(a) {
            return a[0].offsetWidth + css(a, 'marginLeft') + css(a, 'marginRight');
        };

        function height(a) {
            return a[0].offsetHeight + css(a, 'marginTop') + css(a, 'marginBottom');
        };
    };
})(jQuery);
